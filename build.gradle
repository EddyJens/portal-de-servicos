apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

ext.sha = 'git rev-parse --short HEAD'.execute().in.text.trim()
version = '1.0.' + sha + '-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.0.BUILD-SNAPSHOT'
        classpath 'org.springframework:springloaded:1.2.1.BUILD-SNAPSHOT'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "https://oss.sonatype.org/content/repositories/public" }
}

dependencies {
    compile 'org.projectlombok:lombok:1.14.4'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    compile 'org.jolokia:jolokia-osgi:1.2.2'
    compile 'org.pegdown:pegdown:1.4.2'
    compile 'com.github.slugify:slugify:2.1.3'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

def generatedSources = ["br/gov/servicos/legado/**"]

test {
    testLogging {
        showStandardStreams = false
        exceptionFormat "full"
    }

    jacoco {
        excludes = generatedSources
    }
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
    }

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        testOutputDir = file("$buildDir/classes/test/")
        excludeDirs += files(".git-crypt", ".vagrant", "data", "gradle")
    }

    project {
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors'
            xmlFile.asNode().component.find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }

            // setup Git root
            xmlFile.asNode().component.find { it.@name == 'VcsDirectoryMappings' }.replaceNode {
                component(name: 'VcsDirectoryMappings') {
                    mapping(directory: "", vcs: "")
                    mapping(directory: "\$PROJECT_DIR\$", vcs: 'Git')
                }
            }

        }
    }
}

jar {
    baseName = 'guia-de-servicos'
}

task stage(type: Copy, dependsOn: [clean, assemble]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}
