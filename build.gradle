apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'asset-pipeline'

ext.sha = 'git rev-parse --short HEAD'.execute().in.text.trim()
version = '1.0.' + sha + '-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.0.BUILD-SNAPSHOT'
        classpath 'org.springframework:springloaded:1.2.1.BUILD-SNAPSHOT'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath("com.bertramlabs.plugins:asset-pipeline-gradle:2.0.19")
        classpath("com.bertramlabs.plugins:less-asset-pipeline:2.0.8")
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'https://oss.sonatype.org/content/repositories/public' }
    maven { url 'http://dl.bintray.com/bertramlabs/asset-pipeline' }
}

dependencies {
    compile 'org.projectlombok:lombok:1.14.4'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    compile 'org.jolokia:jolokia-osgi:1.2.2'
    compile 'org.pegdown:pegdown:1.4.2'
    compile 'com.github.slugify:slugify:2.1.3'
    compile 'com.bertramlabs.plugins:asset-pipeline-spring-boot:2.0.19'
    compile 'com.bertramlabs.plugins:less-asset-pipeline:2.0.8'
    compile 'org.codehaus.groovy:groovy'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

def generatedSources = [
    'br/gov/servicos/legado/**/*Type*',
    'br/gov/servicos/legado/**/ObjectFactory.class'
]

test {
    testLogging {
        showStandardStreams = false
        exceptionFormat "full"
    }

    jacoco {
        excludes = generatedSources
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
    }

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        testOutputDir = file("$buildDir/classes/test/")
        excludeDirs += files(".git-crypt", ".vagrant", "data", "gradle")

        iml.withXml { xmlFile ->
            // mark test/resource as a resource folder
            def atts = xmlFile.asNode().component.content.sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/test/resources' } .attributes()
            atts.remove('isTestSource')
            atts.put('type', 'java-test-resource')
        }
    }

    project {
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors'
            xmlFile.asNode().component.find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }

            // setup Git root
            xmlFile.asNode().component.find { it.@name == 'VcsDirectoryMappings' }.replaceNode {
                component(name: 'VcsDirectoryMappings') {
                    mapping(directory: "", vcs: "")
                    mapping(directory: "\$PROJECT_DIR\$", vcs: 'Git')
                }
            }

        }
    }
}

assets {
    assetsPath = "$projectDir/assets" // Precisa ser nesta pasta por uma limitação do plugin. Se for outra pasta a task bootRun não vai recompilar os assets.
    compileDir = "$buildDir/main/resources/static/assets"
}

jar {
    baseName = 'guia-de-servicos'
}

task stage(type: Copy, dependsOn: [clean, assemble]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}
