#!/usr/bin/env ruby

require 'rubygems'
require 'httpclient'

Http = HTTPClient.new
$base_url = 'http://localhost:8081/'

$all_links = Array.new
$accessed_links = Array.new
$skipped_links = Array.new

def main()
  url_access_level1 = accessUrl($base_url, 0)
  
  link_level1 = getHrefs(url_access_level1)
  
  link_level1.uniq.each_with_index do |link1, index|
  
    url_level1 = fixingUrl(link1)
    
    addList(url_level1, 1)
    
    if not $accessed_links.include? url_level1 and not url_level1.include? "feedback" and url_level1.include? $base_url
      url_access_level2 = accessUrl(url_level1, 1)
      link_level2 = getHrefs(url_access_level2)
      link_level2.uniq.each_with_index do |link2, index|
        url_level2 = fixingUrl(link2)
        addList(url_level2, 2)
        
        if not $accessed_links.include? url_level2 and not url_level2.include? "feedback" and url_level2.include? $base_url
          url_access_level3 = accessUrl(url_level2, 2)
          link_level3 = getHrefs(url_access_level3)
          link_level3.uniq.each_with_index do |link3, index|
            url_level3 = fixingUrl(link3)
            addList(url_level3, 3)
            
            if not $accessed_links.include? url_level3 and not url_level3.include? "feedback" and url_level3.include? $base_url
              url_access_level3 = accessUrl(url_level3, 3)
              link_level4 = getHrefs(url_access_level3)
              link_level4.uniq.each_with_index do |link4, index|
                url_level4 = fixingUrl(link4)
                addList(url_level4, 4)
              end
            end
          end      
        end
      end
    end  
  end
  
  generateReport("accessed_links_from5", $accessed_links, false)
  generateReport("skipped_links_from5", $skipped_links, false)
  generateReport("all_links_from5", $all_links, true)
end

def getHrefs(page)
  href = page.body.scan(/href="(.*?)"/i)
end

def accessUrl(url, level)
  url_access = Http.get url
  $accessed_links << url
  return url_access
end

def fixingUrl(url)
  if url.to_s[0..5].include? "www" or url.to_s[0..5].include? "http"
    fixedUrl = url.to_s[2..-3]
  else
    fixedUrl = $base_url.to_s[0..-2] + url.to_s[2..-3]
  end
  return fixedUrl
end

def addList(url, level)
  if not $accessed_links.include? url and not url.include? "feedback" and not $all_links.include? url
    $all_links << url
  else
    if url.include? "feedback"
      $skipped_links << url
    end
  end
end

def generateReport(name, list, access)
  File.open("#{name}.html", "w+") do |r|
    r.puts "<HTML><BODY>"
    r.puts "<TABLE BORDER='1'>"
    if access == true
      r.puts "<TR><TH>Index</TH><TH>Links</TH><TH>Status</TH></TR>"
    else
      r.puts "<TR><TH>Index</TH><TH>Links</TH></TR>"
    end
    list.uniq.sort.each_with_index do |link, index|
      if access == true
        if not link.include? $base_url
          begin
            url_access = Http.get link
            url_status = url_access.status
          rescue Exception => url_status 
            next
            end
        else
          url_status = "External Link"
        end
      end
      r.puts "<TR>"
      if access == true
        r.puts "<TD>#{index}</TD><TD><a href=\"#{link}\">#{link}</a></TD><TD>#{url_status}</TD>"
      else
        r.puts "<TD>#{index}</TD><TD><a href=\"#{link}\">#{link}</a></TD>"
      end
      r.puts "</TR>"
    end
    r.close()
  end
end

main
