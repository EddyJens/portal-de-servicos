#!/usr/bin/env ruby

require 'octokit'
require 'csv'

Octokit.configure do |c| 
  unless ENV.has_key?('TOKEN')
    raise <<-EOM


Token de acesso ao Github não encontrado!

* Crie um: https://help.github.com/articles/creating-an-access-token-for-command-line-use
* Passe-o para este script através da variável de ambiente TOKEN:

  TOKEN=da39a3ee5e6b4b0d3255bfef95601890afd80709 ruby #{__FILE__}

EOM
  end
  c.access_token = ENV['TOKEN'] 
end

def to_days(seconds)
  return nil if seconds.nil?
  days = seconds / 60.0 / 60.0 / 24.0
  [1, days.round].max
end

repos = [
  'servicosgovbr/guia-de-servicos',
  'servicosgovbr/editor-guia-de-servicos',
  'servicosgovbr/cartas-de-servico'
]

TF='%m/%d/%y %H:%M'

def label(l)
  Proc.new {|e| e.event == 'labeled' and e.label.name = l }
end

print 'Listando os cartões no Github...'
Octokit.auto_paginate = true
repos.each do |repo|
  issues = Octokit.issues repo, :per_page => 1000, :state => 'all', :filter => 'all'
  puts 'OK'

  tabela = issues.map do |issue|
    print "Processando #{issue.number} - '#{issue.title}'..."

    issue.events = Octokit.issue_events repo, issue.number

    para_rodar = issue.events.first &label('ready')
    em_progresso = issue.events.first &label('in progress')
    para_homologacao = issue.events.first &label('para homologação')
    em_homologacao = issue.events.first &label('homologação')
    em_producao = issue.events.first &label('produção')

    cycle_time = (em_producao.created_at - em_progresso.created_at rescue nil) ||
                 (issue.closed_at - em_progresso.created_at rescue nil)

    lead_time = (issue.closed_at - para_rodar.created_at rescue nil) ||
                (issue.closed_at - issue.created_at rescue nil)

    puts 'OK'
    {
      numero: issue.number,
      descricao: issue.title,
      docs: issue.labels.any? {|l| l.name == 'docs' },
      bug: issue.labels.any? {|l| l.name == 'BUG' },
      tech_debt: issue.labels.any? {|l| l.name == 'tech debt' },
      repo: repo,
      ultima_alteracao: issue.updated_at.getlocal.strftime(TF),

      ideia: issue.created_at.getlocal.strftime(TF),
      para_rodar: (para_rodar.created_at.getlocal.strftime(TF) rescue nil),
      em_progresso: (em_progresso.created_at.getlocal.strftime(TF) rescue nil),
      para_homologacao: (para_homologacao.created_at.getlocal.strftime(TF) rescue nil),
      em_homologacao: (em_homologacao.created_at.getlocal.strftime(TF) rescue nil),
      em_producao: (em_producao.created_at.getlocal.strftime(TF) rescue nil),
      aprendemos: (issue.closed_at.getlocal.strftime(TF) rescue nil),

      cycle_time: to_days(cycle_time),
      lead_time: to_days(lead_time),
    }
  end

  CSV.open("#{File.basename repo}.csv", 'w') do |csv|
    csv << tabela.first.keys
    tabela.each do |hash|
      csv << hash.values
    end
  end

end
